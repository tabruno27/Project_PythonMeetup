from aiogram import types, Dispatcher
from aiogram.filters import Command
from datacenter.db_manager import get_current_talk, create_question
import logging

logger = logging.getLogger(__name__)

async def handle_question(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–∫–ª–∞–¥
        talk = get_current_talk()
        if not talk:
            await message.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫–ª–∞–¥–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=types.ReplyKeyboardRemove())
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        question_text = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
        
        if not question_text:
            await message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask\n–ü—Ä–∏–º–µ—Ä: /ask –ë—É–¥–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –¥–æ–∫–ª–∞–¥–∞?")
            return

        # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –ë–î
        question = create_question(
            talk_id=talk.id,
            guest_telegram_id=message.from_user.id,
            text=question_text
        )

        if question:
            response = (
                "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                f"*–î–æ–∫–ª–∞–¥:* {talk.title}\n"
                f"*–°–ø–∏–∫–µ—Ä:* {talk.speaker.name}\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ!"
            )
            await message.answer(response, parse_mode="Markdown", reply_markup=types.ReplyKeyboardRemove())
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logger.error(f"Error processing question: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_ask_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"""
    talk = get_current_talk()
    if not talk:
        await message.answer(
            "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫–ª–∞–¥–∞.\n"
            "–í–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return
        
    help_text = (
        "üìù –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`/ask –í–∞—à –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å`\n\n"
        "*–ü—Ä–∏–º–µ—Ä:*\n"
        "/ask –ë—É–¥–µ—Ç –ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø–æ—Å–ª–µ –¥–æ–∫–ª–∞–¥–∞?"
    )
    
    await message.answer(
        help_text,
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardRemove()
    )

def register_question_handlers(dp: Dispatcher):
    dp.message.register(handle_ask_command, Command("ask"))
    dp.message.register(handle_question, Command("ask"))