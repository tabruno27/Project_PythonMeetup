import os
from aiogram import types, Dispatcher
from aiogram.filters import Command
from dotenv import load_dotenv
from datacenter.db_manager import (update_talk, get_talks_by_speaker,
                                   get_speaker_by_id, get_all_participants, get_talk_by_id)
from aiogram import Bot
import datetime


load_dotenv()
ORGANIZER_TELEGRAM_ID = int(os.getenv('ORGANIZER_TELEGRAM_ID'))

# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
pending_update_data = {}

async def cmd_update_schedule(message: types.Message):
    if message.from_user.id != ORGANIZER_TELEGRAM_ID:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–ø–∏–∫–µ—Ä–∞, —á—å—é –ø—Ä–æ–≥—Ä–∞–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å:")
    pending_update_data[message.from_user.id] = {"step": "waiting_for_speaker_id"}

async def process_update_schedule(message: types.Message):
    user_id = message.from_user.id

    if user_id in pending_update_data:
        step = pending_update_data[user_id]["step"]

        if step == "waiting_for_speaker_id":
            speaker_id_str = message.text.strip()

            if not speaker_id_str.isdigit():
                await message.answer("ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return

            speaker_id = int(speaker_id_str)
            speaker = get_speaker_by_id(speaker_id)

            if not speaker:
                await message.answer(f"–°–ø–∏–∫–µ—Ä —Å ID {speaker_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–∞
            talks = get_talks_by_speaker(speaker_id)
            if not talks:
                await message.answer(f"–£ —Å–ø–∏–∫–µ—Ä–∞ {speaker.name} –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤.")
                del pending_update_data[user_id]
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–∞
            schedule_message = "\n".join([f"{talk.id}: '{talk.title}' —Å {talk.start_time} –¥–æ {talk.end_time}" for talk in talks])
            await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–∞ {speaker.name}:\n{schedule_message}\n–í–≤–µ–¥–∏—Ç–µ ID –¥–æ–∫–ª–∞–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å:")
            pending_update_data[user_id]["step"] = "waiting_for_talk_id"
            pending_update_data[user_id]["speaker_id"] = speaker_id

        elif step == "waiting_for_talk_id":
            talk_id_str = message.text.strip()

            if not talk_id_str.isdigit():
                await message.answer("ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return

            talk_id = int(talk_id_str)
            talk = get_talk_by_id(talk_id)

            if not talk or talk.speaker.id != pending_update_data[user_id]["speaker_id"]:
                await message.answer("–î–æ–∫–ª–∞–¥ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–Ω –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Å–ø–∏–∫–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–∫–ª–∞–¥–∞
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫–ª–∞–¥–∞:")
            pending_update_data[user_id]["talk_id"] = talk_id
            pending_update_data[user_id]["step"] = "waiting_for_title"

        elif step == "waiting_for_title":
            new_title = message.text.strip()
            talk_id = pending_update_data[user_id]["talk_id"]

            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM):")
            pending_update_data[user_id]["new_title"] = new_title
            pending_update_data[user_id]["step"] = "waiting_for_start_time"

        elif step == "waiting_for_start_time":
            new_start_time_str = message.text.strip()
            try:
                new_start_time = datetime.datetime.strptime(new_start_time_str, "%Y-%m-%d %H:%M")
            except ValueError:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return

            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM):")
            pending_update_data[user_id]["new_start_time"] = new_start_time
            pending_update_data[user_id]["step"] = "waiting_for_end_time"

        elif step == "waiting_for_end_time":
            new_end_time_str = message.text.strip()
            try:
                new_end_time = datetime.datetime.strptime(new_end_time_str, "%Y-%m-%d %H:%M")
            except ValueError:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return

                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            talk_id = pending_update_data[user_id]["talk_id"]
            new_title = pending_update_data[user_id]["new_title"]
            new_start_time = pending_update_data[user_id]["new_start_time"]
            new_end_time = new_end_time

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫–ª–∞–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            updated_talk = update_talk(talk_id, new_title=new_title, new_start_time=new_start_time,
                                       new_end_time=new_end_time)

            if updated_talk:
                await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
                await notify_participants(updated_talk)

            else:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            del pending_update_data[user_id]


async def notify_participants(message: types.Message, speaker_id: int, title: str, start_time: datetime.datetime, end_time: datetime.datetime):
    participants = get_all_participants()  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

    start_time_str = start_time.strftime('%Y-%m-%d %H:%M')
    end_time_str = end_time.strftime('%Y-%m-%d %H:%M')

    for participant in participants:

        message_text = (
            f"üì¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üó£ –î–æ–∫–ª–∞–¥: {title}\n"
            f"üïí –í—Ä–µ–º—è: {start_time_str} - {end_time_str}\n"
            f"üîó –°–ø–∏–∫–µ—Ä ID: {speaker_id}\n"
            f"–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!"
        )
        await message.bot.send_message(chat_id=participant["telegram_id"], text=message_text)



def register_up_sheduler_handlers(dp: Dispatcher):
    dp.message.register(cmd_update_schedule, Command("update_schedule"))
    dp.message.register(process_update_schedule)
