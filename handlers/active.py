from aiogram import types, Dispatcher
from aiogram.filters import Command
from datacenter.db_manager import get_current_talk
from commands import get_user_role, get_keyboard_for_role

async def handle_active_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /active"""
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    role = await get_user_role(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = get_keyboard_for_role(role)
    
    talk = get_current_talk()
    if not talk:
        await message.answer(
            "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫–ª–∞–¥–∞.",
            reply_markup=keyboard.as_markup(resize_keyboard=True)
        )
        return
        
    response = (
        "üé§ *–¢–µ–∫—É—â–∏–π –¥–æ–∫–ª–∞–¥:*\n\n"
        f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {talk.title}\n"
        f"*–°–ø–∏–∫–µ—Ä:* {talk.speaker.name}\n"
        f"*–í—Ä–µ–º—è:* {talk.start_time.strftime('%H:%M')} - {talk.end_time.strftime('%H:%M')}"
    )
    
    await message.answer(
        response,
        parse_mode="Markdown",
        reply_markup=keyboard.as_markup(resize_keyboard=True)
    )

def register_active_handlers(dp: Dispatcher):
    dp.message.register(handle_active_command, Command("active"))