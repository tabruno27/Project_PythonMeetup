import os
from aiogram import types, Dispatcher
from aiogram.filters import Command
from dotenv import load_dotenv
from datacenter.db_manager import get_speaker_by_telegram_id, get_talks_by_speaker, get_questions_for_talk, \
    mark_question_as_answered
import logging

load_dotenv()
ORGANIZER_TELEGRAM_ID = int(os.getenv('ORGANIZER_TELEGRAM_ID'))


async def handle_my_questions(message: types.Message):
    user_id = message.from_user.id

    speaker = get_speaker_by_telegram_id(user_id)

    if not speaker:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏–∫–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫ —Å–≤–æ–∏–º –¥–æ–∫–ª–∞–¥–∞–º.")
        return

    talks = get_talks_by_speaker(speaker.id)

    if not talks:
        await message.answer(f"üëã {speaker.name}, —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤.")
        return

    result_message = [f"üìù {speaker.name}, –≤–æ—Ç –≤–æ–ø—Ä–æ—Å—ã –∫ –≤–∞—à–∏–º –¥–æ–∫–ª–∞–¥–∞–º:"]

    has_questions = False

    for talk in talks:
        questions = get_questions_for_talk(talk.id)

        if not questions:
            continue

        has_questions = True
        result_message.append(f"\nüó£ –î–æ–∫–ª–∞–¥: {talk.title}")

        for i, question in enumerate(questions, 1):
            status = "‚úÖ" if question.answered else "‚ùì"
            result_message.append(f"{i}. {status} {question.text}")

        result_message.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

    if not has_questions:
        await message.answer(f"üëã {speaker.name}, –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –≤–∞—à–∏–º –¥–æ–∫–ª–∞–¥–∞–º.")
        return

    await message.answer("\n".join(result_message))

    # await message.answer(
    #     "–ß—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
    #     "/answered <ID –≤–æ–ø—Ä–æ—Å–∞>\n\n"
    #     "–ü—Ä–∏–º–µ—Ä: /answered 5"
    # )


# async def handle_answered(message: types.Message):
#     user_id = message.from_user.id
#
#     speaker = get_speaker_by_telegram_id(user_id)
#
#     if not speaker:
#         await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏–∫–µ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–º–µ—á–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ.")
#         return
#
#     command_parts = message.text.split()
#     if len(command_parts) != 2 or not command_parts[1].isdigit():
#         await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /answered <ID –≤–æ–ø—Ä–æ—Å–∞>")
#         return
#
#     question_id = int(command_parts[1])
#
#     updated_question = mark_question_as_answered(question_id)
#
#     if updated_question:
#         await message.answer(f"‚úÖ –í–æ–ø—Ä–æ—Å #{question_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π!")
#     else:
#         await message.answer(f"‚ùå –í–æ–ø—Ä–æ—Å —Å ID {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π.")


def register_my_questions_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    dp.message.register(handle_my_questions, Command("my_questions"))
    # dp.message.register(handle_answered, Command("answered"))