import os
from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from datacenter.db_manager import update_talk, get_talks_by_speaker, get_speaker_by_id, get_speaker_by_telegram_id, get_all_participants, get_talk_by_id
import datetime
import logging


load_dotenv()
ORGANIZER_TELEGRAM_ID = int(os.getenv('ORGANIZER_TELEGRAM_ID'))

class UpdateScheduleState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    waiting_for_speaker_id = State()
    waiting_for_talk_id = State()
    waiting_for_title = State()
    waiting_for_start_time = State()
    waiting_for_end_time = State()


async def cmd_update_schedule(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    user_id = message.from_user.id

    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /update_schedule –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if user_id != ORGANIZER_TELEGRAM_ID:
        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID —Å–ø–∏–∫–µ—Ä–∞, —á—å—é –ø—Ä–æ–≥—Ä–∞–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å:")
    await state.set_state(UpdateScheduleState.waiting_for_speaker_id)
    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID —Å–ø–∏–∫–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


async def process_update_speaker_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Telegram ID —Å–ø–∏–∫–µ—Ä–∞"""
    telegram_id_str = message.text.strip()

    if not telegram_id_str.isdigit():
        await message.answer("Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    telegram_id = int(telegram_id_str)
    speaker = get_speaker_by_telegram_id(telegram_id)

    if not speaker:
        await message.answer(f"‚ùå –°–ø–∏–∫–µ—Ä —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–∞
    speaker_id = speaker.id
    talks = get_talks_by_speaker(speaker_id)
    if not talks:
        await message.answer(f"‚ùå –£ —Å–ø–∏–∫–µ—Ä–∞ {speaker.name} –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤.")
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–∞
    schedule_message = "\n".join([
        f"ID {talk.id}: '{talk.title}' —Å {talk.start_time.strftime('%Y-%m-%d %H:%M')} –¥–æ {talk.end_time.strftime('%Y-%m-%d %H:%M')}"
        for talk in talks
    ])

    await message.answer(
        f"üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–∞ {speaker.name}:\n\n{schedule_message}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –¥–æ–∫–ª–∞–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å:"
    )

    await state.update_data(speaker_id=speaker_id)
    await state.set_state(UpdateScheduleState.waiting_for_talk_id)


async def process_update_talk_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –¥–æ–∫–ª–∞–¥–∞"""
    talk_id_str = message.text.strip()

    if not talk_id_str.isdigit():
        await message.answer("ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    talk_id = int(talk_id_str)
    talk = get_talk_by_id(talk_id)
    data = await state.get_data()

    if not talk or talk.speaker.id != data['speaker_id']:
        await message.answer("‚ùå –î–æ–∫–ª–∞–¥ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–Ω –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Å–ø–∏–∫–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫–ª–∞–¥–∞:")
    await state.update_data(talk_id=talk_id)
    await state.set_state(UpdateScheduleState.waiting_for_title)


async def process_update_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    new_title = message.text.strip()

    if not new_title:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(new_title=new_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.05.2025 14:00):")
    await state.set_state(UpdateScheduleState.waiting_for_start_time)


async def process_update_start_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"""
    new_start_time_str = message.text.strip()

    try:
        new_start_time = datetime.datetime.strptime(new_start_time_str, "%d.%m.%Y %H:%M")
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.05.2025 14:00):")
        return

    await state.update_data(new_start_time=new_start_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.05.2025 15:00):")
    await state.set_state(UpdateScheduleState.waiting_for_end_time)


async def process_update_end_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    new_end_time_str = message.text.strip()

    try:
        new_end_time = datetime.datetime.strptime(new_end_time_str, "%d.%m.%Y %H:%M")
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.05.2025 15:00):")
        return

    data = await state.get_data()
    new_start_time = data['new_start_time']

    if new_end_time <= new_start_time:
        await message.answer("‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    talk_id = data['talk_id']
    new_title = data['new_title']

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫–ª–∞–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        updated_talk = update_talk(
            talk_id,
            new_title=new_title,
            new_start_time=new_start_time,
            new_end_time=new_end_time
        )

        if updated_talk:
            await message.answer(
                f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"üìã –î–æ–∫–ª–∞–¥: {new_title}\n"
                f"üïí –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_start_time.strftime('%d.%m.%Y %H:%M')} - {new_end_time.strftime('%d.%m.%Y %H:%M')}"
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await notify_participants(message, updated_talk)
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()


async def notify_participants(message: types.Message, talk):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    try:
        participants = get_all_participants()

        if not participants:
            return

        start_time_str = talk.start_time.strftime('%d.%m.%Y %H:%M')
        end_time_str = talk.end_time.strftime('%d.%m.%Y %H:%M')

        notification_text = (
            f"üì¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"üó£ –î–æ–∫–ª–∞–¥: {talk.title}\n"
            f"üë§ –°–ø–∏–∫–µ—Ä: {talk.speaker.name}\n"
            f"üïí –í—Ä–µ–º—è: {start_time_str} - {end_time_str}\n\n"
            f"–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ! üöÄ"
        )

        for participant in participants:
            try:
                await message.bot.send_message(
                    chat_id=participant["telegram_id"],
                    text=notification_text
                )
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {participant['telegram_id']}: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


def register_up_sheduler_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    dp.message.register(cmd_update_schedule, Command("update_schedule"))
    dp.message.register(process_update_speaker_id, UpdateScheduleState.waiting_for_speaker_id)
    dp.message.register(process_update_talk_id, UpdateScheduleState.waiting_for_talk_id)
    dp.message.register(process_update_title, UpdateScheduleState.waiting_for_title)
    dp.message.register(process_update_start_time, UpdateScheduleState.waiting_for_start_time)
    dp.message.register(process_update_end_time, UpdateScheduleState.waiting_for_end_time)
