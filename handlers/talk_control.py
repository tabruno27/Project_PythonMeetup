import os
from aiogram import types, Dispatcher
from aiogram.filters import Command
from dotenv import load_dotenv
from datacenter.db_manager import get_speaker_by_telegram_id, get_talks_by_speaker, get_talk_by_id, update_talk, \
    get_all_participants
import logging

load_dotenv()
ORGANIZER_TELEGRAM_ID = int(os.getenv('ORGANIZER_TELEGRAM_ID'))


active_talk_id = None


def is_talk_active():
    return active_talk_id is not None


def get_active_talk_id():
    return active_talk_id


async def handle_start_talk(message: types.Message):
    global active_talk_id

    user_id = message.from_user.id

    speaker = get_speaker_by_telegram_id(user_id)

    if not speaker:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏–∫–µ—Ä—ã –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –¥–æ–∫–ª–∞–¥—ã.")
        return

    if is_talk_active():
        active_talk = get_talk_by_id(active_talk_id)
        if active_talk and active_talk.speaker.id == speaker.id:
            await message.answer(
                f"‚ùóÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫–ª–∞–¥: '{active_talk.title}'.\n–ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /end_talk –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ.")
        else:
            await message.answer("‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∂–µ –∏–¥—ë—Ç –¥—Ä—É–≥–æ–π –¥–æ–∫–ª–∞–¥. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return

    talks = get_talks_by_speaker(speaker.id)

    if not talks:
        await message.answer(f"üëã {speaker.name}, —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤.")
        return

    if len(talks) == 1:
        active_talk_id = talks[0].id
        await message.answer(
            f"‚úÖ –î–æ–∫–ª–∞–¥ '{talks[0].title}' –Ω–∞—á–∞—Ç!\n–°–ª—É—à–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /ask\n–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–∫–ª–∞–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /end_talk")

        await notify_participants_start(message.bot, talks[0])
    else:
        talk_list = "\n".join([f"{i + 1}. {talk.title}" for i, talk in enumerate(talks)])
        await message.answer(
            f"üëã {speaker.name}, —É –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫–ª–∞–¥–æ–≤. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–∫–ª–∞–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å:\n\n{talk_list}\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–∏—Ç–µ: /start_talk 1"
        )

        command_parts = message.text.split()
        if len(command_parts) == 2 and command_parts[1].isdigit():
            talk_number = int(command_parts[1]) - 1
            if 0 <= talk_number < len(talks):
                active_talk_id = talks[talk_number].id
                await message.answer(
                    f"‚úÖ –î–æ–∫–ª–∞–¥ '{talks[talk_number].title}' –Ω–∞—á–∞—Ç!\n–°–ª—É—à–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /ask\n–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–∫–ª–∞–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /end_talk")

                await notify_participants_start(message.bot, talks[talk_number])
            else:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–∫–ª–∞–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")


async def handle_end_talk(message: types.Message):
    global active_talk_id

    user_id = message.from_user.id

    speaker = get_speaker_by_telegram_id(user_id)

    if not speaker:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏–∫–µ—Ä—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∞—Ç—å –¥–æ–∫–ª–∞–¥—ã.")
        return


    if not is_talk_active():
        await message.answer("‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫–ª–∞–¥–∞.")
        return


    active_talk = get_talk_by_id(active_talk_id)

    if active_talk.speaker.id != speaker.id:
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —á—É–∂–æ–π –¥–æ–∫–ª–∞–¥.")
        return


    talk_title = active_talk.title
    await notify_participants_end(message.bot, active_talk)
    active_talk_id = None

    await message.answer(f"‚úÖ –î–æ–∫–ª–∞–¥ '{talk_title}' –∑–∞–≤–µ—Ä—à–µ–Ω!")


async def notify_participants_start(bot, talk):
    try:
        participants = get_all_participants()
        if not participants:
            return

        notification_text = (
            f"üé¨ –í–Ω–∏–º–∞–Ω–∏–µ! –ù–∞—á–∞–ª—Å—è –¥–æ–∫–ª–∞–¥!\n\n"
            f"üó£ –¢–µ–º–∞: {talk.title}\n"
            f"üë§ –°–ø–∏–∫–µ—Ä: {talk.speaker.name}\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å–ø–∏–∫–µ—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /ask"
        )

        for participant in participants:
            if participant["telegram_id"] != talk.speaker.telegram_id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–ø–∏–∫–µ—Ä—É
                try:
                    await bot.send_message(
                        chat_id=participant["telegram_id"],
                        text=notification_text
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {participant['telegram_id']}: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞—á–∞–ª–µ –¥–æ–∫–ª–∞–¥–∞: {e}")


async def notify_participants_end(bot, talk):
    try:
        participants = get_all_participants()
        if not participants:
            return

        notification_text = (
            f"üèÅ –î–æ–∫–ª–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"üó£ –¢–µ–º–∞: {talk.title}\n"
            f"üë§ –°–ø–∏–∫–µ—Ä: {talk.speaker.name}\n\n"
            f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
        )

        for participant in participants:
            if participant["telegram_id"] != talk.speaker.telegram_id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–ø–∏–∫–µ—Ä—É
                try:
                    await bot.send_message(
                        chat_id=participant["telegram_id"],
                        text=notification_text
                    )
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {participant['telegram_id']}: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ–∫–ª–∞–¥–∞: {e}")


def register_talk_control_handlers(dp: Dispatcher):
    dp.message.register(handle_start_talk, Command("start_talk"))
    dp.message.register(handle_end_talk, Command("end_talk"))