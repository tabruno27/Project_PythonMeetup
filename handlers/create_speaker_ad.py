import os
from aiogram import types, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from datacenter.db_manager import create_speaker, get_speaker_by_telegram_id, create_talk
import datetime
import logging

load_dotenv()
ORGANIZER_TELEGRAM_ID = int(os.getenv('ORGANIZER_TELEGRAM_ID'))


class CreateSpeakerState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏–∫–µ—Ä–∞"""
    waiting_for_speaker_id = State()
    waiting_for_speaker_name = State()
    waiting_for_talk_title = State()
    waiting_for_start_time = State()
    waiting_for_end_time = State()


async def cmd_add_speaker(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏–∫–µ—Ä–∞"""
    if message.from_user.id != ORGANIZER_TELEGRAM_ID:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram ID —Å–ø–∏–∫–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    await state.set_state(CreateSpeakerState.waiting_for_speaker_id)


async def process_speaker_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Telegram ID —Å–ø–∏–∫–µ—Ä–∞"""
    speaker_id_str = message.text.strip()

    if not speaker_id_str.isdigit():
        await message.answer("ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    speaker_id = int(speaker_id_str)
    existing_speaker = get_speaker_by_telegram_id(speaker_id)

    if existing_speaker:
        await message.answer(f"–°–ø–∏–∫–µ—Ä —Å Telegram ID {speaker_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ: {existing_speaker.name}")
        await state.clear()
        return

    await state.update_data(speaker_id=speaker_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —Å–ø–∏–∫–µ—Ä–∞:")
    await state.set_state(CreateSpeakerState.waiting_for_speaker_name)


async def process_speaker_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å–ø–∏–∫–µ—Ä–∞"""
    speaker_name = message.text.strip()

    if not speaker_name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —Å–ø–∏–∫–µ—Ä–∞:")
        return

    await state.update_data(speaker_name=speaker_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫–ª–∞–¥–∞:")
    await state.set_state(CreateSpeakerState.waiting_for_talk_title)


async def process_talk_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–∫–ª–∞–¥–∞"""
    talk_title = message.text.strip()

    if not talk_title:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫–ª–∞–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫–ª–∞–¥–∞:")
        return

    await state.update_data(talk_title=talk_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–∫–ª–∞–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-12-25 14:00):")
    await state.set_state(CreateSpeakerState.waiting_for_start_time)


async def process_start_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –¥–æ–∫–ª–∞–¥–∞"""
    start_time_str = message.text.strip()

    try:
        start_time = datetime.datetime.strptime(start_time_str, '%Y-%m-%d %H:%M')
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-12-25 14:00):")
        return

    await state.update_data(start_time=start_time)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–∫–ª–∞–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-12-25 15:00):")
    await state.set_state(CreateSpeakerState.waiting_for_end_time)


async def process_end_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–∫–ª–∞–¥–∞"""
    end_time_str = message.text.strip()

    try:
        end_time = datetime.datetime.strptime(end_time_str, '%Y-%m-%d %H:%M')
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-12-25 15:00):")
        return

    data = await state.get_data()
    start_time = data['start_time']

    if end_time <= start_time:
        await message.answer(
            "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    speaker_id = data['speaker_id']
    speaker_name = data['speaker_name']
    talk_title = data['talk_title']

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏–∫–µ—Ä–∞
        speaker = create_speaker(name=speaker_name, telegram_id=speaker_id)
        if not speaker:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–∏–∫–µ—Ä–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–π ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫–ª–∞–¥
        talk = create_talk(
            speaker_id=speaker.id,
            title=talk_title,
            start_time=start_time,
            end_time=end_time
        )

        if not talk:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫–ª–∞–¥–∞.")
            await state.clear()
            return

        await message.answer(
            f"‚úÖ –°–ø–∏–∫–µ—Ä '{speaker_name}' —Å –¥–æ–∫–ª–∞–¥–æ–º '{talk_title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.\n"
            f"üïí –í—Ä–µ–º—è –¥–æ–∫–ª–∞–¥–∞: —Å {start_time.strftime('%Y-%m-%d %H:%M')} –ø–æ {end_time.strftime('%Y-%m-%d %H:%M')}."
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ø–∏–∫–µ—Ä–∞
        try:
            await message.bot.send_message(
                chat_id=speaker_id,
                text=(
                    f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {speaker_name}!\n\n"
                    f"üé§ –í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ —Å–ø–∏—Å–æ–∫ —Å–ø–∏–∫–µ—Ä–æ–≤ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.\n"
                    f"üìã –í–∞—à –¥–æ–∫–ª–∞–¥: {talk_title}\n"
                    f"üïí –í—Ä–µ–º—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è: —Å {start_time.strftime('%Y-%m-%d %H:%M')} –ø–æ {end_time.strftime('%Y-%m-%d %H:%M')}.\n\n"
                    f"–£–¥–∞—á–∏ —Å –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º! üöÄ"
                )
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä—É {speaker_id}: {e}")
            await message.answer("‚ö†Ô∏è –°–ø–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ø–∏–∫–µ—Ä–∞/–¥–æ–∫–ª–∞–¥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    await state.clear()


def register_create_speaker_ad_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏–∫–µ—Ä–∞"""
    dp.message.register(cmd_add_speaker, Command("add_speaker"))
    dp.message.register(process_speaker_id, CreateSpeakerState.waiting_for_speaker_id)
    dp.message.register(process_speaker_name, CreateSpeakerState.waiting_for_speaker_name)
    dp.message.register(process_talk_title, CreateSpeakerState.waiting_for_talk_title)
    dp.message.register(process_start_time, CreateSpeakerState.waiting_for_start_time)
    dp.message.register(process_end_time, CreateSpeakerState.waiting_for_end_time)



